/**
 * INBOUND EMAIL WEBHOOK
 * Receives incoming emails from SendGrid Inbound Parse
 * Processes customer support emails with AI and responds automatically
 */

const express = require('express');
const router = express.Router();
const multer = require('multer');
const CustomerSupportAI = require('../services/CustomerSupportAI');
const EmailDeliverabilityService = require('../services/EmailDeliverabilityService');

// Use multer to parse multipart/form-data (SendGrid Inbound Parse format)
const upload = multer();

// Initialize services
const logger = {
  info: (msg) => console.log(msg),
  warn: (msg) => console.warn(msg),
  error: (msg) => console.error(msg)
};

const supportAI = new CustomerSupportAI();
const emailService = new EmailDeliverabilityService(logger);

/**
 * INBOUND EMAIL WEBHOOK
 * POST /webhook/inbound-email
 *
 * Receives emails sent to support@oatcode.com
 * Processes with AI and responds automatically
 */
router.post('/', upload.none(), async (req, res) => {
  try {
    console.log('📧 Received inbound email');

    // SendGrid Inbound Parse sends data as form fields
    const {
      from,          // Sender email
      to,            // Recipient email (support@oatcode.com)
      subject,       // Email subject
      text,          // Plain text body
      html,          // HTML body
      sender_ip,     // Sender's IP
      envelope,      // Email envelope data
      charsets,      // Character sets
      SPF            // SPF check result
    } = req.body;

    // Parse sender email and name
    const senderMatch = from.match(/(.*?)\s*<(.+?)>/) || [null, from, from];
    const senderName = senderMatch[1]?.trim() || 'Customer';
    const senderEmail = senderMatch[2]?.trim() || from;

    console.log(`   From: ${senderName} <${senderEmail}>`);
    console.log(`   Subject: ${subject}`);
    console.log(`   Body preview: ${(text || html || '').substring(0, 100)}...`);

    // Get email body (prefer text, fallback to HTML)
    const emailBody = text || html || '';

    // Process with AI Support Bot
    console.log('🤖 Processing with AI support bot...');

    const aiResponse = await supportAI.handleInquiry({
      message: emailBody,
      subject: subject,
      customerEmail: senderEmail,
      customerName: senderName,
      channel: 'email'
    });

    console.log(`   AI Response: ${aiResponse.message.substring(0, 100)}...`);

    // Send response email
    const responseEmail = {
      to: senderEmail,
      subject: aiResponse.needsFollowUp
        ? `Re: ${subject}`
        : `Re: ${subject}`,
      text: aiResponse.message,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #6366f1;">OatCode Support</h2>
          <div style="white-space: pre-wrap;">${aiResponse.message}</div>

          <hr style="margin: 30px 0; border: none; border-top: 1px solid #e5e7eb;">

          <p style="color: #6b7280; font-size: 14px;">
            This response was generated by our AI support assistant. If you need further help,
            just reply to this email!
          </p>

          <p style="color: #6b7280; font-size: 14px;">
            <strong>OatCode</strong><br>
            Professional Websites, Powered by AI<br>
            <a href="mailto:support@oatcode.com">support@oatcode.com</a>
          </p>
        </div>
      `
    };

    // Send email with deliverability checks
    const sendResult = await emailService.sendWithDeliverabilityCheck(
      responseEmail,
      {
        fromName: 'OatCode Support',
        recipientName: senderName
      }
    );

    if (sendResult.success) {
      console.log('✅ AI response sent successfully');

      // Log to database if available
      if (global.db) {
        await global.db.run(
          `INSERT OR IGNORE INTO support_tickets (
            customer_email,
            customer_name,
            subject,
            message,
            ai_response,
            resolved_at,
            created_at
          ) VALUES (?, ?, ?, ?, ?, ?, ?)`,
          [
            senderEmail,
            senderName,
            subject,
            emailBody,
            aiResponse.message,
            new Date().toISOString(),
            new Date().toISOString()
          ]
        );
      }
    } else {
      console.error('❌ Failed to send AI response:', sendResult.reason);
    }

    // Return 200 to acknowledge receipt (required by SendGrid)
    res.status(200).json({
      message: 'Email processed successfully',
      aiResponse: aiResponse.message.substring(0, 100) + '...'
    });

  } catch (error) {
    console.error('❌ Inbound email processing error:', error.message);
    console.error(error.stack);

    // Always return 200 to SendGrid to avoid retries
    res.status(200).json({
      message: 'Error logged',
      error: error.message
    });
  }
});

/**
 * TEST ENDPOINT
 * POST /webhook/inbound-email/test
 * Test the support bot without SendGrid
 */
router.post('/test', express.json(), async (req, res) => {
  try {
    const { email, name, subject, message } = req.body;

    console.log('🧪 Testing support bot...');
    console.log(`   From: ${name} <${email}>`);
    console.log(`   Subject: ${subject}`);
    console.log(`   Message: ${message}`);

    const aiResponse = await supportAI.handleInquiry({
      message: message,
      subject: subject,
      customerEmail: email,
      customerName: name,
      channel: 'email'
    });

    res.json({
      success: true,
      aiResponse: aiResponse.message,
      needsFollowUp: aiResponse.needsFollowUp
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

module.exports = router;
